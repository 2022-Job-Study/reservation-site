// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model User {
  id           Int           @id @default(autoincrement())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  username     String
  avatarId     String?
  kakaoId      String?       @unique
  shops        Shop[]
  reviews      Review[]
  hearts       Heart[]
  reservations Reservation[]
}

model Shop {
  id           Int           @id @default(autoincrement())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int
  name         String
  location     String
  startTime    String?
  endTime      String?
  description  String        @db.MediumText
  imageId      String?
  Reviews      Review[]
  hearts       Heart[]
  reservations Reservation[]
}

model Review {
  id              Int      @id @default(autoincrement())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  review          String   @db.MediumText
  createdUser     User     @relation(fields: [createdUserId], references: [id], onDelete: Cascade)
  createdUserId   Int
  commentedShop   Shop     @relation(fields: [commentedShopId], references: [id], onDelete: Cascade)
  commentedShopId Int
  score           Int
}

model Heart {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdUser   User     @relation(fields: [createdUserId], references: [id], onDelete: Cascade)
  createdUserId Int
  likedShop     Shop     @relation(fields: [likedShopId], references: [id], onDelete: Cascade)
  likedShopId   Int
}

model Reservation {
  id                Int      @id @default(autoincrement())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  start             DateTime
  end               DateTime
  reservationUser   User     @relation(fields: [reservationUserId], references: [id], onDelete: Cascade)
  reservationUserId Int
  reservationShop   Shop     @relation(fields: [reservationShopId], references: [id], onDelete: Cascade)
  reservationShopId Int
}
